import Input from '../input';
import Dropdown, {DropdownItem, DropdownMenu} from '../dropdown';

const {
    data, className, style, value, trigger,
    changeOnSelect, format, filterable,
    keywords, _show,
} = self.get();

const labelObj = {
    label: null,
    labels: [],
    values: [],
};

let hasData = false;

const Options = (props) => {
    const data = props.data || [];
    const level = props.level;
    const parentShowed = props.parentShowed;
    const ret = [];

    // show loading
    if (!data.length) {
        if (!props.loaded) {
            return <i class="ion-load-c icon-loading"></i>
        } else {
            return <div class="k-no-data">无数据</div>
        }
    }

    data.forEach((item, index) => {
        const {active, selected} = self.handleProps(item, labelObj, level);

        const Item = () => {
            const events = {};
            events['ev-click'] = self._onClick.bind(self, item, level);
            if (trigger === 'hover') {
                events['ev-mouseenter'] = self._onClick.bind(self, item, level);
            }
            if (!changeOnSelect) {
                events['ev-select'] = self._onSelect;
            }

            return (
                <DropdownItem
                    disabled={{ item.disabled }}
                    class={{ {'k-active': active} }}
                    {{ ...events }}
                >
                    {{ item.template ? item.template(item, index) : item.label }}
                    <i v-if={{ item.children }} class="k-arrow ion-ios-arrow-right"></i>
                </DropdownItem>
            );
        };

        const show = parentShowed && active;
        ret.push(
            !item.children ? 
                <Item /> :
                <Dropdown 
                    position={{ {my: 'left top', at: 'right top', collisionDirection: ['left']} }}
                    of="parent"
                    disabled={{ item.disabled }}
                    trigger={{ trigger }}
                    value={{ show }}
                >
                    <Item />
                    <DropdownMenu
                        class={{ {
                            "k-select-dropdown": true,
                            "k-cascader-dropdown": true,
                        } }}
                        ev-show={{ self._onSubMenuShow.bind(self, item) }}
                    >
                        <Options
                            data={{ item.children }} 
                            level={{ level + 1 }} 
                            parentShowed={{ show }}
                            v-if={{ // for performance, don't render children if they are hidden or unselected
                                show || selected
                            }}
                            loaded={{ item.loaded }}
                        />
                    </DropdownMenu>
                </Dropdown>
        );
    });

    return ret;
}

let Menu
if (!filterable || !keywords) {
    Menu = (
        <DropdownMenu
            ref="cascader"
            class={{ {
                "k-select-dropdown": true,
                "k-cascader-dropdown": true,
            } }}
            ev-$change:value={{ self._onChangeShow }}
            key="cascader"
        >
            <Options
                data={{ data }}
                level={{ 0 }}
                parentShowed={{ _show }}
                loaded={{ true }}
            />
        </DropdownMenu>
    );
} else {
    Menu = (
        <DropdownMenu ev-$changed:value={{ self._position }}
            ref="menu"
            class={{ {
                "k-select-dropdown": true,
                "k-cascader-filterable-dropdown": true, 
            } }}
            ev-$change:value={{ self._onChangeShow }}
            key="filterable"
        >
            {{ (() => {
                const items = self._filter();
                if (!items.length) return <div class="k-no-data">无匹配数据</div>
                return <DropdownItem v-for={{ items }}
                    ev-select={{ self._selectByFilter.bind(self, value) }}
                    disabled={{ value.disabled }}
                >{{ do {
                    // highlight keywords
                    const label = value.map(item => item.label).join(' / ');
                    const labels = label.split(keywords);
                    const length = labels.length; 
                    labels.map((item, index) => {
                        const ret = [item];
                        if (index !== length - 1) {
                            ret.push(<em>{{ keywords }}</em>);
                        }
                        return ret;
                    });
                } }}</DropdownItem>
            })() }}
        </DropdownMenu>
    )
}

labelObj.label = blocks.format ? 
    <b:format args={{ [labelObj.values] }}>{{ do {
        labelObj.values.map(value => value.label).join(' / ')
    } }}</b:format> : 
    format.call(this, labelObj.values);

<t:parent Menu={{ Menu }} class="k-cascader" labelObj={{ labelObj }} />
