import Input from '../input';
import Dropdown, {DropdownItem, DropdownMenu} from '../dropdown';

const {
    data, className, style, value, trigger,
    changeOnSelect, format, filterable, keywords,
} = self.get();

const labelObj = {
    label: null,
    labels: [],
    values: [],
};

const Options = (props) => {
    const data = props.data || [];
    const level = props.level;
    const ret = [];

    // show loading
    if (!data.length) {
        return  <i class="ion-load-c icon-loading"></i>
    }

    data.forEach((item, index) => {
        const {active} = self.handleProps(item, labelObj, level);

        const Item = () => {
            const events = {};
            events['ev-click'] = self._onClick.bind(self, item, level);
            if (trigger === 'hover') {
                events['ev-mouseenter'] = self._onClick.bind(self, item, level);
            }
            if (!changeOnSelect) {
                events['ev-select'] = self._onSelect;
            }

            return (
                <DropdownItem
                    disabled={{ item.disabled }}
                    class={{ {'k-active': active} }}
                    {{ ...events }}
                >
                    {{ item.template ? item.template(item, index) : item.label }}
                    <i v-if={{ item.children }} class="k-arrow ion-ios-arrow-right"></i>
                </DropdownItem>
            );
        };

        ret.push(
            !item.children ? 
                <Item /> :
                <Dropdown 
                    position={{ {my: 'left top', at: 'right top', collisionDirection: ['left']} }}
                    of="parent"
                    disabled={{ item.disabled }}
                    trigger={{ trigger }}
                    value={{ active }}
                >
                    <Item />
                    <DropdownMenu
                        class={{ {
                            "k-select-dropdown": true,
                            "k-cascader-dropdown": true,
                        } }}
                        ev-show={{ self._onSubMenuShow.bind(self, item) }}
                    >
                        <Options data={{ item.children }} level={{ level + 1 }} />
                    </DropdownMenu>
                </Dropdown>
        );
    });

    return ret;
}

let Menu
if (!filterable || !keywords) {
    Menu = (
        <DropdownMenu
            ref="cascader"
            class={{ {
                "k-select-dropdown": true,
                "k-cascader-dropdown": true,
            } }}
            ev-$change:value={{ self._onChangeShow }}
            key="cascader"
        >
            <Options data={{ data }} level={{ 0 }} />
        </DropdownMenu>
    );
} else {
    Menu = (
        <DropdownMenu ev-$changed:value={{ self._position }}
            ref="menu"
            class={{ {
                "k-select-dropdown": true,
                "k-cascader-filterable-dropdown": true, 
            } }}
            ev-$change:value={{ self._onChangeShow }}
            key="filterable"
        >
            <DropdownItem v-for={{ self._filter() }}
                ev-select={{ self._selectByFilter.bind(self, value) }}
                disabled={{ value.disabled }}
            >{{ do {
                // highlight keywords
                const label = value.map(item => item.label).join(' / ');
                const labels = label.split(keywords);
                const length = labels.length; 
                labels.map((item, index) => {
                    const ret = [item];
                    if (index !== length - 1) {
                        ret.push(<em>{{ keywords }}</em>);
                    }
                    return ret;
                });
            } }}</DropdownItem>
        </DropdownMenu>
    )
}

labelObj.label = blocks.format ? <b:format args={{ [labelObj.values] }}>{{ do {
    labelObj.values.map(value => value.label).join(' / ')
} }}</b:format> : format.call(this, labelObj.values);

<t:parent Menu={{ Menu }} class="k-cascader" labelObj={{ labelObj }} />
