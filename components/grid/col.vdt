import gutterStyle, {breakpoints} from './utils';
import {isNullOrUndefined, getRestProps} from '../utils';

let {
    children, span, className, order,
    gutter, offset, push, pull, style
} = self.get();

const {xs, sm, md, lg, xl} = self;

let hasGutter = gutter > 0;
if (hasGutter) {
    style = gutterStyle(gutter, style, 'padding');
}

const classNameObj = {
    'k-col': true,
    [`k-${span}`]: span,
    [className]: className && !hasGutter,
    [`k-offset-${offset}`]: offset > 0,
    [`k-pull-${pull}`]: pull,
    [`k-push-${push}`]: push,
    [`k-order-${order}`]: order,
};
// add responsive class
breakpoints.forEach(item => {
    const obj = self[item];
    if (!obj) return;
    const prefix = item === 'xs' ? 'k-' : `k-${item}-`;
    if (!isNullOrUndefined(obj.span)) {
        classNameObj[`${prefix}${obj.span}`] = true;
    }
    ['order', 'offset', 'pull', 'push'].forEach(prop => {
        if (!isNullOrUndefined(obj[prop])) {
            classNameObj[`${prefix}${prop}-${obj[prop]}`] = true;
        }
    });
});

<div {{ ...getRestProps(self) }} class={{ classNameObj }} style={{ style }}>{{
    hasGutter ?
        <div class={{ className }}>{{ children }}</div> :
        children
}}</div>
