import Item from './item';
import {mapChildren, isStringOrNumberNotEmpty} from '../utils';

const {
    children, className, style, collapse, dot,
    theme, type, size, _isSubMenu, _root, _parent,
} = self.get();

const classNameObj = {
    'k-menu': true,
    [className]: className,
    [`k-${theme}`]: !_root && theme,
    [`k-${size}`]: !_root && size && size !== 'default',
    'k-collapsed': collapse,
    [`k-${type}`]: type,
};

const _children = mapChildren(children, vNode => {
    if (vNode.tag === Item) {
        return h(Item, {
            dot: dot,
            ...vNode.props, 
            _root: _root || self,
            _isFirstFloorChildren: !_root,
            _parentItem: _parent,
        });
    }
    return vNode;
});

const header = (
    <div class="k-header" v-if={{ blocks.header }}>
        {{ do {
            mapChildren(<b:header />, vNode => {
                if (vNode.type === 1 || isStringOrNumberNotEmpty(vNode)) {
                    return <span>{{ vNode }}</span>;
                } else {
                    return vNode;
                }
            })
        } }}
    </div>
);

<template>
    <div v-if={{ !self._isDropdownMenu() }}
        class={{ classNameObj }}
        style={{ style }}
    >{{ header }}{{ _children }}</div>
    <t:parent v-else>
        <b:children>{{ header }}{{ _children }}</b:children>
    </t:parent>
</template>
