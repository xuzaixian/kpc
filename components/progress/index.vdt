const {
    type, className, percent, status, size,
    isOuterText, isInnerText, ref, key, strokeWidth,
    children, ...rest
} = self.get();

const classNameObj = {
    'k-progress' : true,
    [`k-${type}`]: type,
    [className]: className,
    [`k-${status}`]: status !== 'normal',
    [`k-${size}`]: size !== 'default',
}

<div class={{ classNameObj }} {{ ...rest }}>
    <div class="k-container" v-if={{ type === 'bar' }}>
        <div  class="k-content">
            <div class="k-bg" style={{ {width: percent + '%'} }}>
                <div class="k-inner-text" v-if={{ isInnerText }}>
                    {{ percent }} %
                </div>
            </div>
        </div>
    </div>
    <svg class="k-canvas" viewBox="0 0 120 120" v-if={{ type === 'circle' }}>
        {{ do {
            const r = (120 - strokeWidth) / 2;
            const circumference = 2 * Math.PI * r;

            [
                <circle class="k-meter" cx="60" cy="60" r={{ r }}
                    stroke-width={{ strokeWidth }}
                />,
                <circle class="k-value" cx="60" cy="60" r={{ r }}
                    stroke-dashoffset={{ circumference * (1 - percent / 100) }}
                    stroke-dasharray={{ circumference }}
                    stroke-width={{ strokeWidth }}
                />,
                <circle class="k-animate" cx="60" cy="60" r={{ r }}
                    stroke-width={{ strokeWidth }}
                    stroke-dasharray={{ circumference }}
                    stroke-dashoffset={{ circumference }}
                    v-if={{ status === 'active' }}
                >
                    <animate
                        attributeName="stroke-dashoffset"
                        begin="0s"
                        dur="2s"
                        repeatCount="indefinite"
                        from={{circumference}}
                        to={{ circumference * (1 - percent / 100)}}
                    ></animate>
                    <animate attributeName="opacity"
                        begin="0s"
                        dur="2s"
                        repeatCount="indefinite"
                        from="0.2"
                        to="0"
                    ></animate>
                </circle>
            ]
        } }}
    </svg>
    <div class="k-text" v-if={{ children }}>{{ children }}</div>
    <div class="k-text" v-else-if={{ isOuterText }}>
        <span v-if={{ status !== 'success' && status !== 'error' }}>{{ percent }}%</span>
        <span v-else-if={{ status === 'success' }}>
            <i class="k-icon ion-ios-checkmark-outline"></i>
        </span>
        <span v-else-if={{ status === 'error' }}>
            <i class="k-icon ion-ios-close-outline"></i>
        </span>
    </div>
</div>
