import Checkbox from '../checkbox';
import Radio from '../radio';
import Row from './row';
import {normalize} from 'intact';
import Column from './column';
import {noop, isStringOrNumber, getTextByChildren} from '../utils';
import Spin from '../spin';

const {
    checkType, scheme, checkedKeys, data, rowKey, 
    className, fixHeader, noDataTemplate, disableRow,
    resizable, expandedKeys, type, _isSticky,
    style, rowClassName, children, sort, group, _scrollBarWidth,
    _scrollLeft, _scrollTop, _hoverIndex, _scrollPosition, 
    _paddingBottom, _isStickyScrollbar, loading
} = self.get();

let colSpan = checkType === 'checkbox' || checkType === 'radio' ? 1 : 0;
const _scheme = {};

let prevItem = checkType === 'checkbox' || checkType === 'radio' ? 
    {minWidth: 40, key: '_$check'} : {};

let hasFixedLeft;
let hasFixedRight;
self.leftColumns = [];
self.rightColumns = [];

const isInvisible = (onlyLeft, onlyRight, props) => {
    return props.fixed !== 'left' && onlyLeft || props.fixed !== 'right' && onlyRight;
}

let cols;
let currentVNode;

const TheadCreator = ({onlyLeft, onlyRight, refContainer, style}) => {
    const keys = {};
    const refLeftElement = (i) => i && self.leftColumns.push(i);
    const refLeft = (i) => i && self.leftColumns.push(i.element);
    const refRight = (i) => i && self.rightColumns.push(i.element);
    const ref = onlyLeft ? refLeft : onlyRight ? refRight : undefined;
    cols = [];
    const thead = <thead>
        <tr>
            {{ do {
                if (checkType === 'checkbox') {
                    cols.push(<col class="k-th-check" 
                        style={{ {width: self._getHeaderWidth('_$checked')} }} 
                    />);
                    currentVNode = <th class={{ {'k-invisible': onlyRight} }}
                        ref={{ onlyLeft ? refLeftElement : undefined }} 
                        key="_$checked"
                        minWidth={{ 40 }}
                    >
                        <Checkbox value={{ self.isCheckAll() }}
                            ev-click={{ self._toggleCheckAll }}
                        />
                    </th>
                    currentVNode;
                } else if (checkType === 'radio') {
                    cols.push(<col class="k-th-check"
                        style={{ {width: self._getHeaderWidth('_$checked')} }} 
                    />);
                    currentVNode = <th class={{ {"k-invisible": onlyRight} }}
                        ref={{ onlyLeft ? refLeftElement : undefined }} 
                        key="_$checked"
                        minWidth={{ 40 }}
                    ></th>
                    currentVNode;
                }
            } }}
            {{ __u.map(scheme, (item, key) => {
                colSpan++;
                keys[key] = true;

                if (!__u.isObject(item) || item.type) {
                    item = {title: item};
                }

                // because we use the last resize handle to controll the previous column
                // so we bind prevItem here
                /* const _prevItem = prevItem; */
                const dragStart = self._dragStart; //.bind(self, prevItem);
                /* prevItem = item; */

                if (item.fixed === 'left') {
                    hasFixedLeft = true;
                } else if (item.fixed === 'right') {
                    hasFixedRight = true;
                }

                cols.push(<col width={{ item.width }}
                    style={{ {width: self._getHeaderWidth(key)} }} 
                    class={{ {[item.className]: item.className} }}
                />);

                const invisible = isInvisible(onlyLeft, onlyRight, item);
                currentVNode = <Column {{ ...item }}
                    key={{ key }}
                    $parent={{ self }} 
                    ev-click={{ item.sortable ? self._sort.bind(self, key, item) : undefined }}
                    ev-dragStart={{ dragStart }}
                    v-model={{ `group.${key}` }}
                    className={{ {
                        [item.className]: item.className,
                        'k-invisible': invisible, 
                    } }}
                    ref={{ !invisible ? ref : undefined }}
                    prevVNode={{ currentVNode }}
                />
                return currentVNode;
            }) }}
            {{  // for using TableColumn as children
                __u.map(children ? (Array.isArray(children) ? children : [children]) : children, vNode => {
                    if (vNode.tag === Column) {
                        colSpan++;
                        const props = {...vNode.props, $parent: self};
                        
                        if (props.key == null) {
                            _e(new Error('key for TableColumn must be specified.'));
                        } else if (/^\d+$/.test(props.key)) {
                            // avoid digital key
                            _e(new Error('don\'t use digits as key.'));
                        } else if (keys[props.key]) {
                            _e(new Error(`Reduplicated key: ${props.key}`));
                        }

                        keys[props.key] = true;
                        props.value = group[props.key];

                        const dragStart = self._dragStart;
                        /* .bind(self, prevItem); */
                        /* props.prevColumn = prevItem; */
                        /* prevItem = props; */

                        props['ev-$change:value'] = (c, v) => self.set(`group.${props.key}`, v);
                        props['ev-click'] = props.sortable ? self._sort.bind(self, props.key, props) : undefined;
                        props['ev-dragStart'] = dragStart;

                        const invisible = isInvisible(onlyLeft, onlyRight, props);
                        const className = props.className;
                        props.className = _className({
                            [className]: className,
                            'k-invisible': invisible, 
                        });

                        const blockFn = props._blocks && (props._blocks.default || props._blocks.template);
                        _scheme[props.key] = {
                            title: props.title,
                            fixed: props.fixed,
                            ignore: props.ignore,
                            template: props.template || 
                                blockFn && ((...args) => blockFn.call(this, noop, ...args))
                        };

                        if (props.fixed === 'left') {
                            hasFixedLeft = true;
                        } else if (props.fixed === 'right') {
                            hasFixedRight = true;
                        }

                        if (!invisible) {
                            props.ref = ref; 
                        }
                        props.prevVNode = currentVNode;

                        cols.push(<col width={{ props.width }} 
                            style={{ {width: self._getHeaderWidth(props.key)} }} 
                            class={{ {[className]: className} }}
                        />);

                        // clone vNode
                        currentVNode = h(Column, props);
                        return currentVNode;
                    }
                }) 
            }}
        </tr>
    </thead>

    return (
        <div class="k-thead"
            style={{ do {
                const style = self.get('_sticky');
                if (onlyLeft) {
                    ({...style, width: self.get('_leftWidth') + 'px'});
                } else if (onlyRight) {
                    ({...style, width: self.get('_rightWidth') + 'px'});
                } else {
                    style;
                }
            } }}
            ref={{ refContainer }}
            scrollLeft={{ !onlyLeft && !onlyRight ? _scrollLeft : 0 }}
        >
            <div class="k-thead-wrapper"
                style={{ {paddingRight: self.get('_padding') + 'px'} }}
            >
                <table style={{ style }}>
                    <colgroup>{{ cols }}</colgroup>
                    {{ thead }}
                </table>
            </div>
        </div>
    );
};

const TbodyCreator = ({onlyLeft, onlyRight, refContainer, refTable, style}) => {
    const tbody = <tbody>
        {{ data && data.length ? 
            __u.map(data, (value, index) => {
                const key = rowKey.call(self, value, index);
                const disabled = disableRow.call(self, value, index);
                const className = rowClassName.call(self, value, index);
                const tr = <Row key={{ key }}
                    ev-click={{ self._clickRow.bind(self, value, index, key) }}
                    class={{ {
                        'k-disabled': disabled,
                        [className]: className,
                        'k-checked': self.isChecked(key), 
                        'k-hover': _hoverIndex === index, 
                    } }}
                    ev-$destroyed={{ self._onRowDestroyed.bind(self, key) }}
                    ev-mouseenter={{ () => self.set('_hoverIndex', index) }}
                    ev-mouseleave={{ () => self.set('_hoverIndex', undefined) }}
                >
                    <td v-if={{ checkType === 'checkbox' }}
                        class={{ {"k-th-check": true, 'k-invisible': onlyRight} }}
                    >
                        <Checkbox v-model="checkedKeys" name="k-table-checkbox"
                            trueValue={{ key }}
                            disabled={{ disabled }}
                        />
                    </td>
                    <td v-else-if={{ checkType === 'radio' }}
                        class={{ {"k-th-check": true, 'k-invisible': onlyRight} }}
                    >
                        <Radio v-model="checkedKey" name="k-table-radio"
                            trueValue={{ key }}
                            disabled={{ disabled }}
                        />
                    </td>
                    {{ __u.map(__u.extend({}, scheme, _scheme), (item, key) => {
                        let td;
                        if (__u.isObject(item) && item.template) {
                            if (typeof item.template === 'function') {
                                td = item.template.call(self, value, index);
                                // for Intact-Vue
                                if (normalize) {
                                    td = normalize(td);
                                }
                            } else {
                                td = item.template;
                            }
                        } else if (value[key] !== undefined) {
                            td = value[key];
                        } else {
                            let obj = value,
                                keys = key.split('.'),
                                i = 0;
                            while (obj != null && i < keys.length) {
                                obj = obj[keys[i++]];
                            }
                            td = (i && i === keys.length) ? obj : null;
                        }
                        return <td title={{ getTextByChildren(td) || undefined }}
                            data-ignore={{ item.ignore ? '' : undefined }}
                            className={{ {
                                'k-invisible': isInvisible(onlyLeft, onlyRight, item),
                            } }}
                        >
                            {{ typeof td === 'boolean' ? String(td) : td }}
                        </td>
                    }) }}
                </Row>;

                if (blocks.expand && expandedKeys.indexOf(key) > -1) {
                    return [
                        tr,
                        <tr class="k-expand" key={{ `${key}.expand` }}>
                            <td colspan={{ colSpan }}>
                                <b:expand args={{ [value, index] }} />
                            </td>
                        </tr>
                    ]
                } else {
                    return tr;
                }
            }) :
            <tr key="table_no_data">
                <td colspan={{ colSpan }} class="k-no-data">
                    <b:no-data>{{ normalize ? normalize(noDataTemplate) : noDataTemplate }}</b:no-data>
                </td>
            </tr>
        }}
    </tbody>

    return (
        <div class="k-tbody"
            style={{ do {
                let style = {};
                if (!_isSticky &&
                    (typeof fixHeader === 'number' || 
                    typeof fixHeader === 'string')
                ) {
                    style = {maxHeight: `${fixHeader - (onlyLeft || onlyRight ? _paddingBottom : 0)}px`};
                } else if (_isSticky && self.get('_sticky.position')) {
                    style = {paddingTop: self.get('_headerHeight')};
                }
                style;
            } }}
            ref={{ refContainer }}
            ev-scroll={{ self._onTBodyScroll }}
            scrollTop={{ _scrollTop }}
            scrollLeft={{ !onlyLeft && !onlyRight ? _scrollLeft : undefined }}
        >
            <table ref={{ refTable }} style={{ style }}>
                <colgroup>{{ cols }}</colgroup>
                {{ tbody }}
            </table>
        </div>
    );
};

const table = (
    <div class="k-table-wrapper">
        <TheadCreator 
            refContainer={{ dom => self.header = dom }}
            style={{ {width: self.tableWidth} }}
        />
        <TbodyCreator 
            refContainer={{ dom => self.scroll = dom }}
            refTable={{ dom => self.table = dom }} 
            style={{ {width: self.tableWidth} }}
        />
    </div>
);

self.hasFixedLeft = hasFixedLeft;
self.hasFixedRight = hasFixedRight;

const classNameObj = {
    'k-table': true,
    [className]: className,
    [`k-${type}`]: type !== 'default',
    'k-sticky': _isSticky, 
    [`k-scroll-${_scrollPosition}`]: _paddingBottom,
    'k-sticky-scrollbar': _isStickyScrollbar,
};

<div class={{ classNameObj }} style={{ style }}>
    {{ table }}    
    <div class="k-table-wrapper k-fixed-left" v-if={{ hasFixedLeft }} 
        style={{ {width: self.get('_leftWidth') + 'px'} }}
    >
        <TheadCreator onlyLeft style={{ {width: self.get('_tableWidth') + 'px'} }}/>
        <TbodyCreator onlyLeft style={{ {width: self.get('_tableWidth') + 'px'} }}/>
    </div>
    <div class="k-table-wrapper k-fixed-right" v-if={{ hasFixedRight }}
        style={{ {width: self.get('_rightWidth') + 'px'} }}
    >
        <TheadCreator onlyRight style={{ {width: self.get('_tableWidth') + 'px'} }} />
        <TbodyCreator onlyRight style={{ {width: self.get('_tableWidth') + 'px'} }} />
    </div>
    <div class="k-scrollbar" style={{ self.get('_stickyScrollbarStyle') }}
        ev-scroll={{ self._onScrollbarScroll }}
        scrollLeft={{ _scrollLeft }}
        ref="scrollbar"
        v-if={{ _isStickyScrollbar }}
    >
        <div style={{ {width: self.get('_tableWidth') + 'px'} }}
            class="k-inner"
        ></div>
    </div>
    <Spin overlay size="small" v-if={{ loading }} />
</div>
