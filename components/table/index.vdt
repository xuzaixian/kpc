import Checkbox from '../checkbox';
import Radio from '../radio';
import Row from './row';
import Intact from 'intact';
import Column from './column';
import {noop, isStringOrNumber, getTextByChildren, getRestProps, mapChildren} from '../utils';
import Spin from '../spin';
import Affix from '../affix';
import Tooltip from '../tooltip';
import Icon from '../icon';
import Button from '../button';
import {isInvisible} from './utils';

const normalize = Intact.normalize;

const {
    checkType, scheme, checkedKeys, data, rowKey, 
    className, fixHeader, noDataTemplate, disableRow,
    resizable, expandedKeys, type, _isSticky, stickHeader, stripe,
    style, rowClassName, children, sort, group, _scrollBarWidth,
    _scrollPosition, _hoverIndex, tooltipPosition,
    _paddingBottom, _isStickyScrollbar, stickScrollbar, loading,
    _isShowLeftRightMiddle, merge, childrenKey, indent,
    draggable, _dragKey
} = self.get();

let cols;
let currentVNode;
let _scheme;
let maxRows = 0;
let maxCols = 0;
let hasFixedLeft;
let hasFixedRight;

self.leftColumns = [];
self.rightColumns = [];

const TheadCreator = ({onlyLeft, onlyRight, refContainer, style}) => {
    const keys = {};
    const refLeftElement = (i) => i && self.leftColumns.push(i);
    const refLeft = (i) => i && self.leftColumns.push(i.element);
    const refRight = (i) => i && self.rightColumns.push(i.element);
    const ref = onlyLeft ? refLeft : onlyRight ? refRight : undefined;
    const tableColumns = [];

    cols = [];
    _scheme = {};

    let checkVNode;
    if (checkType === 'checkbox' || checkType === 'radio') {
        maxCols++;
        cols.push(<col class="k-th-check" 
            style={{ {width: self._getHeaderWidth('_$checked')} }} 
        />);
        checkVNode = currentVNode = <th class={{ {'k-invisible': onlyRight} }}
            ref={{ onlyLeft ? refLeftElement : undefined }} 
            key="_$checked"
            minWidth={{ 40 }}
        >
            <Checkbox value={{ self.isCheckAll() }}
                ev-click={{ self._toggleCheckAll }}
                v-if={{ checkType === 'checkbox' }}
            />
        </th>
        tableColumns[0] = [checkVNode];
    }
    
    const beforeLoop = (layer) => {
        if (layer + 1 > maxRows) maxRows = layer + 1;
        if (!tableColumns[layer]) tableColumns[layer] = [];
    };
    const loop = (item, key, parent, layer, fixed, loopRecursiveCallback) => {
        if (!__u.isObject(item) || item.type /* is vNode */) {
            item = {title: item};
        }
        item.key = key;

        // if parent fixed, fix children
        if (fixed) {
            item.fixed = fixed;
        }

        const dragStart = self._dragStart;

        if (item.fixed === 'left') {
            hasFixedLeft = true;
        } else if (item.fixed === 'right') {
            hasFixedRight = true;
        }

        const invisible = isInvisible(onlyLeft, onlyRight, item);
        let vNode = <Column {{ ...item }}
            $parent={{ self }} 
            ev-click={{ item.sortable ? self._sort.bind(self, key, item) : undefined }}
            ev-dragStart={{ dragStart }}
            value={{ self.get(`group.${key}`) }}
            ev-$change:value={{ self._onChangeGroup.bind(self, key) }}
            invisible={{ invisible }}
            class={{ item.className }}
            ref={{ !invisible ? ref : undefined }}
            prevVNode={{ currentVNode }}
            cols={{ 0 }}
        />

        tableColumns[layer].push(vNode);

        const props = vNode.props;

        if (loopRecursiveCallback(item, props, layer + 1, item.fixed)) {
            props.rows = 1;
        } else {
            currentVNode = vNode;
            if (/^\d+$/.test(key)) {
                // avoid digital key
                _e(new Error(`don't use digits as key: ${key}.`));
            } else if (_scheme[key]) {
                _e(new Error(`reduplicated key: ${key}`));
            }

            cols.push(<col width={{ item.width }}
                style={{ {width: self._getHeaderWidth(key)} }} 
                class={{ {[item.className]: item.className} }}
            />);

            props.cols = 1;
            maxCols++;
            Object.defineProperty(props, 'rows', {
                get() {
                    return maxRows - layer;
                },
                enumerable: true
            });

            // add leaf node to _scheme
            _scheme[key] = props;

            // add to _columns to check width of column
            const oRef = vNode.ref;
            vNode.ref = (i) => {
                if (i) {
                    self._columns[key] = i;
                } else {
                    delete self._columns[key];
                }
                oRef && oRef(i);
            };
        }

        if (parent) {
            parent.cols += props.cols;
            // if child fixed and it will not be invisible
            // parent must not be invisible too
            if (!props.invisible) {
                parent.invisible = false;
            }
        }
    };
    const loopScheme = (scheme, parent, layer, fixed) => {
        let ret = false;
        beforeLoop(layer);
        __u.map(scheme, (item, key) => {
            ret = true;
            loop(item, key, parent, layer, fixed, (item, props, layer, fixed) => {
                if (item.scheme) {
                    return loopScheme(item.scheme, props, layer, fixed);
                }
                return false;
            });
        });
        return ret;
    };
    const loopColumn = (children, parent, layer, fixed) => {
        // add a flag, when we enter to the map callback set it to true
        // because it may have children but is not Column
        let ret = false;
        let beforeLoopDone = false;
        mapChildren(children, vNode => {
            if (vNode.tag === Column) {
                if (!beforeLoopDone) {
                    beforeLoop(layer);
                    beforeLoopDone = true;
                }
                ret = true;
                const props = vNode.props;
                const blockFn = props._blocks && (props._blocks.default || props._blocks.template);
                const _props = {
                    ...props,
                    template: props.template,
                    blockFn,
                };
                loop(_props, props.key, parent, layer, fixed, (item, props, layer, fixed) => {
                    if (item.children) {
                        return loopColumn(item.children, props, layer, fixed);
                    }
                    return false;
                });
            }
        });
        return ret;
    };
    loopScheme(scheme, null, 0);
    // for using TableColumn as children
    loopColumn(children, null, 0);

    // set checkVNode's rowspan
    if (maxRows > 1 && checkVNode) {
        checkVNode.props.rowspan = maxRows;
    } 
    
    const thead = (
        <div class="k-thead"
            style={{ do {
                if (onlyLeft) {
                    ({width: self.get('_leftWidth') + 'px'});
                } else if (onlyRight) {
                    ({width: self.get('_rightWidth') + 'px'});
                }
            } }}
            ref={{ refContainer }}
        >
            <div class="k-thead-wrapper"
                style={{ {paddingRight: self.get('_padding') + 'px'} }}
            >
                <table style={{ style }}>
                    <colgroup>{{ cols }}</colgroup>
                    <thead>
                        <tr v-for={{ tableColumns }}>{{ value }}</tr>
                    </thead>
                </table>
            </div>
        </div>
    );

    return _isSticky ? 
        <Affix top={{ stickHeader === true ? 0 : +stickHeader }}
            exclude={{ self._excludeStickHeader }}
        >
            {{ thead }}
        </Affix> :
        thead;
};

const TbodyCreator = ({onlyLeft, onlyRight, refContainer, refTable, style}) => {
    // save the rowspan and colspan information
    const grid = [];
    const rowKeys = []; // save all rowKey
    const rowCheckeds = []; // Save the isChecked of all the rows
    const rowDisableds = [];
    const firstCloumnRowSpans = [];
    let rows;
    if (!data || !data.length) {
        rows = <tr key="table_no_data">
            <td colspan={{ maxCols }} class="k-no-data">
                <b:no-data>{{ normalize ? normalize(noDataTemplate) : noDataTemplate }}</b:no-data>
            </td>
        </tr>;
    } else {
        let index = 0;
        rows = [];
        const loop = (data, level, hidden) => {
            data.forEach(value => {
                const children = childrenKey && Array.isArray(value[childrenKey]) ? 
                    value[childrenKey] : null; 

                const key = rowKey.call(self, value, index);
                const disabled = disableRow.call(self, value, index, key);
                const className = rowClassName.call(self, value, index, key);
                const spreaded = self.isSpreaded(key);
                const checked = self.isChecked(key);
                rowKeys.push(key);
                rowCheckeds.push(checked);
                rowDisableds.push(disabled);

                let tr = <Animate
                    a:tag={{ Row }}
                    a:transition="c-fade"
                    a:disabled={{ !draggable }}
                    key={{ key }}
                    rowKey={{ key }}
                    value={{ value }}
                    index={{ index }}
                    class={{ {
                        'k-disabled': disabled,
                        [className]: className,
                        'k-checked': checked,
                        'k-hover': _hoverIndex === index, 
                        'k-selected': !disabled && self.isSelected(key),
                        'k-spread': spreaded, 
                        'k-hidden': hidden,
                    } }}

                    onClick={{ self._clickRow }}
                    onDestroy={{ self._onRowDestroyed }}
                    onRowEnter={{ self._onRowEnter }}
                    onRowLeave={{ self._onRowLeave }}

                    onRowDragStart={{ self._onRowDragStart }}
                    onRowDragEnd={{ self._onRowDragEnd }}
                    onRowDragOver={{ self._onRowDragOver }}

                    onToggleSpreadRow={{ self._toggleSpreadRow }}
                    onChangeChecked={{ self._onChangeChecked }}

                    checkType={{ checkType }}
                    onlyRight={{ onlyRight }}
                    onlyLeft={{ onlyLeft }}
                    disabled={{ disabled }}
                    scheme={{ _scheme }}
                    merge={{ merge }}
                    level={{ level }}
                    indent={{ indent }}
                    children={{ children }}
                    grid={{ grid }}
                    checked={{ checked }}
                    draggable={{ draggable }}
                    dragKey={{ _dragKey }}
                    rowKeys={{ rowKeys }}
                    rowCheckeds={{ rowCheckeds }}
                    rowDisableds={{ rowDisableds }}
                    firstCloumnRowSpans={{ firstCloumnRowSpans }}
                />

                // add tooltip
                if (blocks.tooltip) {
                    const content = <b:tooltip args={{ [value, index] }} />;
                    tr = <Tooltip position={{ tooltipPosition }}>
                        <template>{{ tr }}</template>
                        <b:content>{{ content }}</b:content>
                    </Tooltip>
                }

                if (blocks.expand && expandedKeys.indexOf(key) > -1) {
                    tr = [
                        tr,
                        <tr class="k-expand" key={{ `${key}.expand` }}>
                            <td colspan={{ maxCols }}>
                                <b:expand args={{ [value, index] }} />
                            </td>
                        </tr>
                    ]
                }

                index++;
                rows.push(tr);

                // for tree table
                if (children) {
                    loop(value[childrenKey], level + 1, hidden || !spreaded);
                }
            });
        };

        loop(data, 0, false);
    }

    const tbody = <Animate a:tag="tbody" a:disabled={{ true }}>{{ rows }}</Animate>

    return (
        <div class="k-tbody"
            style={{ do {
                let style;
                if (!_isSticky &&
                    (typeof fixHeader === 'number' || typeof fixHeader === 'string')
                ) {
                    style = {maxHeight: `${fixHeader - (onlyLeft || onlyRight ? _paddingBottom : 0)}px`};
                } 
                /* else if (_isSticky && self.get('_sticky.position')) { */
                    /* style = {paddingTop: self.get('_headerHeight')}; */
                /* } */
                style;
            } }}
            ref={{ refContainer }}
            ev-scroll={{ self._onTBodyScroll }}
        >
            <table ref={{ refTable }} style={{ style }}>
                <colgroup>{{ cols }}</colgroup>
                {{ tbody }}
            </table>
        </div>
    );
};

const table = (
    <div class="k-table-wrapper">
        <TheadCreator 
            refContainer={{ dom => self.header = dom }}
            style={{ {width: self.tableWidth} }}
        />
        <TbodyCreator 
            refContainer={{ dom => self.scroll = dom }}
            refTable={{ dom => self.table = dom }} 
            style={{ {width: self.tableWidth} }}
        />
    </div>
);

const FixedTable = ({position}) => {
    const tableWidth = self.get('_tableWidth') + 'px';
    const props = {[position === 'left' ? 'onlyLeft' : 'onlyRight']: true};
    const style = {
        width: self.get(`_${position}Width`) + 'px',
    };
    if (!_isSticky && fixHeader === true) {
        style.maxHeight = `calc(100% - ${_paddingBottom}px)`;
    }

    return (
        <div class={{ `k-table-wrapper k-fixed-${position}` }}
            style={{ style }}
        >
            <TheadCreator {{ ...props }} style={{ {width: tableWidth} }}/>
            <TbodyCreator {{ ...props }} style={{ {width: tableWidth} }}
                refContainer={{ i => self[`${position}FixedScroll`] = i }}
            />
        </div>
    );
}

self.hasFixedLeft = hasFixedLeft;
self.hasFixedRight = hasFixedRight;

const classNameObj = {
    'k-table': true,
    [className]: className,
    [`k-${type}`]: type !== 'default',
    'k-sticky': _isSticky, 
    [`k-scroll-${_scrollPosition}`]: _isShowLeftRightMiddle,
    'k-sticky-scrollbar': _isStickyScrollbar,
    'k-stripe': stripe,
    'k-fluid-height': fixHeader === true,
    'k-draggable': draggable,
};

<div class={{ classNameObj }} {{ ...getRestProps(self) }}>
    {{ table }}    
    <FixedTable position="left" v-if={{ hasFixedLeft }} />
    <FixedTable position="right" v-if={{ hasFixedRight }} />
    <Affix v-if={{ _isStickyScrollbar }}
        bottom={{ stickScrollbar === true ? 0 : +stickScrollbar }} 
        shouldFix={{ self._shouldStickScrollbar }}
        style={{ self.get('_stickyScrollbarStyle') }}
    >
        <div class="k-scrollbar"
            ev-scroll={{ self._onTBodyScroll }}
            ref="scrollbar"
        >
            <div style={{ {width: self.get('_tableWidth') + 'px'} }}
                class="k-inner"
            ></div>
        </div>
    </Affix>
    <Spin overlay size="small" v-if={{ loading }} />
</div>
