import Checkbox from '../checkbox';
import Radio from '../radio';
import Intact from 'intact';
import {noop, isStringOrNumber, getTextByChildren, getRestProps, mapChildren} from '../utils';
import {isInvisible} from './utils';
import Button from '../button';
import Icon from '../icon';

const {
    className, checkType, rowKey,
    disabled, onlyRight, scheme,
    value, onlyLeft, index, merge,
    level, indent, children, grid,
    checked, draggable, dragKey, 
    rowKeys, firstCloumnRowSpans
} = self.get();
const normalize = Intact.normalize;

const rowInGrid = self.rowInGrid = [];
if (merge) {
    grid.push(rowInGrid);
}

let columnIndex = -1;

const combinedScheme = checkType !== 'none' ? Object.assign({ checkType: {key: '$check'} }, scheme) : scheme;
self.spanColumnsInfo = firstCloumnRowSpans;

<tr class={{ {[className]: className, 'k-dragging': dragKey === rowKey} }}
    ev-click={{ self._onClick }}
    ev-mouseenter={{ self._onMouseEnter }}
    ev-mouseleave={{ self._onMouseLeave }}
    draggable={{ draggable ? true : undefined }}
    ev-dragstart={{ self._onDragStart }}
    ev-dragend={{ self._onDragEnd }}
    ev-dragover={{ self._onDragOver }}
>
    {{ __u.map(combinedScheme, (item, schemeKey) => {
        columnIndex++;
        let spans;
        if (merge) {
            if (columnIndex > 0) {
                const prevCell = rowInGrid[columnIndex - 1];
                if (prevCell && prevCell.colspan > 1) {
                    const current = {
                        rowspan: prevCell.rowspan,
                        colspan: prevCell.colspan - 1,
                    };
                    rowInGrid.push(current);
                    return;
                }
            }
            if (index > 0) {
                const prevRow = grid[index - 1];
                const aboveCell = prevRow[columnIndex];
                if (aboveCell && aboveCell.rowspan > 1) {
                    const current = { 
                        rowspan: aboveCell.rowspan - 1,
                        colspan: aboveCell.colspan,
                    }
                    rowInGrid.push(current);

                    if(columnIndex === 0 && checkType !== 'none'){
                        firstCloumnRowSpans.push(firstCloumnRowSpans[index - 1])
                    }
                    return;
                }
            }

            spans = merge.call(self, value, item, index, columnIndex);
            rowInGrid.push(spans);
            
            if(columnIndex === 0 && checkType !== 'none'){
                const firstColumnRowspan = spans.rowspan || 1;
                const endRowIndex = index + firstColumnRowspan; 
                const spanColumnsInfo = firstColumnRowspan > 1 ? {spanRowKeys: rowKeys.slice(index, endRowIndex), spanIndexs:  Array.from(new Array(endRowIndex).keys()).slice(index)} : {spanRowKeys: rowKey, spanIndexs: index};
                firstCloumnRowSpans.push(spanColumnsInfo)
            }
        }
        let td;
        if (item.template) {
            if (typeof item.template === 'function') {
                td = item.template.call(self, value, index);
                // for Intact-Vue
                if (normalize) {
                    td = normalize(td);
                }
            } else {
                td = item.template;
            }
        } else if (item.blockFn) {
            td = item.blockFn.call(self, noop, value, index);
        } else if (value[schemeKey] !== undefined) {
            td = value[schemeKey];
        } else {
            let obj = value,
                keys = schemeKey.split('.'),
                i = 0;
            while (obj != null && i < keys.length) {
                obj = obj[keys[i++]];
            }
            td = (i && i === keys.length) ? obj : null;
        }
     
        if(columnIndex===0 && checkType !== 'none' ){
            return  checkType === 'checkbox' ? <td {{ ...spans }}
                        class={{ {"k-th-check": true, 'k-invisible': onlyRight} }} 
                        data-column={{ spans && spans.rowspan > 1 ? "k-first-column" : undefined  }}
                    >
                        <Checkbox name="k-table-checkbox"
                            indeterminate={{ self._isHalfChecked() }}
                            value={{ self._isAllChecked() }}
                            ev-$change:value={{ self._onChangeChecked }}
                            disabled={{ self._isDisabled() }}
                        />
                    </td> : <td {{ ...spans }}
                        class={{ {"k-th-check": true, 'k-invisible': onlyRight} }}
                    >
                        <Radio name="k-table-radio"
                            value={{ self._isAllChecked() }}
                            ev-$change:value={{ self._onChangeChecked }}
                            disabled={{ self._isDisabled() }}
                        />
                    </td>
        }else{
            const isFirstEleColumn = checkType === 'none' ? columnIndex === 0 : columnIndex === 1;

            return <td title={{ getTextByChildren(td) || undefined }}
                    data-ignore={{ item.ignore ? '' : undefined }}
                    className={{ {
                        'k-invisible': isInvisible(onlyLeft, onlyRight, item),
                        [`k-${item.align}`]: item.align,
                        [item.className]: item.className,
                    } }}
                    key={{ schemeKey }}
                    {{ ...spans }}
                    style={{ {paddingLeft: isFirstEleColumn && level ? level * indent + 'px' : undefined } }}
                >
                    <Button type="none" icon circle size="mini" 
                        v-if={{ isFirstEleColumn && children }}
                        class="k-table-arrow"
                        ev-click={{ self._onToggleSpreadRow }}
                    >
                        <Icon class="ion-ios-arrow-right" size="small" />
                    </Button>
                    {{ typeof td === 'boolean' ? String(td) : td }}
                </td>
        }
       
    }) }}
</tr>
