import Input from '../input';
import Dropdown, {DropdownItem, DropdownMenu} from '../dropdown';
import {isStringOrNumber, getTextByChildren, addStyle, _$} from '../utils';
import Option from './option';
import OptionGroup from './group';
import {Tabs, Tab} from '../tabs';

const {
    className, clearable, data, value, multiple,
    disabled, filterable, keywords, _show,
    placeholder, size, style, name, children,
    fluid, width, allowUnmatch, card, hideIcon,
    container, inline
} = self.get();

let _activeLabel = self.get('_activeLabel');

const _placeholder = placeholder == null ?
    (allowUnmatch && filterable) ? _$('请输入或选择') : _$('请选择') :
    placeholder;

const classNameObj = {
    'k-select': true,
    [className]: className,
    [scope.className]: scope.className,
    'k-disabled': disabled,
    'k-show': _show,
    'k-clearable': clearable,
    [`k-${size}`]: size !== 'default',
    'k-fluid': fluid,
    'k-with-prefix': blocks.prefix,
    'k-with-suffix': !hideIcon,
    'k-inline': inline,
};

let hasValue = value != null && (!multiple && value !== '' || multiple && value.length);
const isGroup = Array.isArray(self.get('data.0.data'));

const labelObj = scope.labelObj || {
    // only show value as label when allowUnmatch is true, #40
    label: allowUnmatch && isStringOrNumber(value) ? value : null,
    labels: [],
};
let groupIndex = 0;

const Options = props => {
    const data = props.data;
    const ret = [];
    data.forEach((item, index) => {
        // deprecate text, use label instead of
        if (item.text) item.label = item.text;
        
        const {valid, active} = self.handleProps(item, labelObj);

        if (valid) {
            ret.push(
                <DropdownItem 
                    ev-select={{ self._onSelect.bind(self, item.value) }}
                    disabled={{ item.disabled }}
                    class={{ {'k-active': active} }}
                    hideOnSelect={{ !multiple }}
                >{{ item.template ? item.template(item, index) : item.label }}</DropdownItem>
            );

            // for card type groups, we need to highlight the parent label
            if (active && card) {
                if (_activeLabel == null && _show) {
                    _activeLabel = groupIndex;
                    self._setActiveLabelSilent(_activeLabel);
                }
            }
        }
    });

    return ret;
}

const OptionsVNodes = ({children}) => {
    return __u.map(children ? (Array.isArray(children) ? children : [children]) : children, vNode => {
        if (vNode.tag === Option) {
            let props = vNode.props;
            props = {
                ...props, 
                'ev-select': self._onSelect.bind(self, props.value),
                hideOnSelect: !multiple,
                label: props.label || getTextByChildren(props.children),
                children: props.children || props.label ,
            };
            const {active, valid} = self.handleProps(props, labelObj);
            if (!valid) {
                return <!---->;
            } else {
                props.className = _className({
                    [props.className]: props.className,
                    'k-active': active,
                });
            }

            // for card type groups, we need to highlight the parent label
            if (active && card) {
                if (_activeLabel == null && _show) {
                    _activeLabel = groupIndex;
                    self._setActiveLabelSilent(_activeLabel);
                }
            }

            // if the multiple select option is active
            // add a √ icon
            if (active && multiple) {
                props.children = [
                    props.children,
                    <i class="k-checkmark ion-ios-checkmark-empty"></i>
                ];
            }

            // return the cloned vNode
            return h(Option, props);
        } else if (vNode.tag === OptionGroup) {
            let props = vNode.props;
            props = {
                ...props,
                children: <OptionsVNodes>{{ props.children }}</OptionsVNodes>
            };
            groupIndex++;
            return h(OptionGroup, props);
        }

        return vNode;
    }); 
} 

const labelList = [];

const Menu = scope.Menu || (
    <DropdownMenu ev-$changed:value={{ self._position }}
        ref="menu"
        class={{ {
            "k-select-dropdown": true,
            "k-card": card,
        } }}
        ev-$change:value={{ self._onChangeShow }}
    >{{ do {
        const _children = [];
        if (!isGroup) {
            _children.push(<Options data={{ data }} />);
        } else {
            _children.push(
                <OptionGroup v-for={{ data }} label={{ value.label }}>
                    <Options data={{ value.data }} parentLabel={{ value.label }} />
                </OptionGroup>
            );
        }
        _children.push(<OptionsVNodes>{{ children }}</OptionsVNodes>);

        // if it is card type group, we extract the label as navBar
        if (card) {
            const vNodes = [];
            let index = 0;
            function flatten(children) {
                children.forEach(vNode => {
                    if (Array.isArray(vNode)) {
                        flatten(vNode);
                    } else if (vNode) {
                        if (vNode.tag === OptionGroup) {
                            const props = vNode.props;
                            const label = (props._blocks || {}).label || props.label;
                            labelList.push({label});
                            vNode.props = {...props, _card: true};

                            // if the _activeLabel is undefined
                            // we active the first label
                            if (_activeLabel == null && _show) {
                                _activeLabel = index;
                                self._setActiveLabelSilent(index);
                            }

                            // only render the active options
                            if (_activeLabel === index) {
                                vNodes.push(vNode);
                            }
                            index++;
                        } else {
                            vNodes.push(vNode);
                        }
                    }
                });
            }
            flatten(_children);
            [ 
                <Tabs vertical type="border-card" v-model="_activeLabel">
                    <Tab v-for={{ labelList }} value={{ key }}>
                        {{ typeof value.label === 'function' ? 
                            // pass by block
                            value.label(() => {}) :
                            // pass by property
                            value.label
                        }}
                    </Tab>
                </Tabs>,
                <div class="k-groups">{{ vNodes }}</div>
            ];
        } else {
            _children;
        }
    } }}</DropdownMenu>
);

// if the value is not in options, then set hasValue to false
if (hasValue && labelObj.label == null && !labelObj.labels.length) {
    hasValue = false;
    // if this is a value, but the value does not exist in options
    // we set it to empty, #41
    self._clearValue();
}

<div class={{ {...classNameObj, 'k-has-value': hasValue} }}
    style={{ width != null ? addStyle(style, {width: `${width}px`}) : style }} 
    tabindex={{ disabled ? "-1" : "0" }}
    ev-keypress={{ self._onKeypress }}
    ev-keydown={{ self._onKeydown }}
>
    <Dropdown
        position={{ {my: 'left top+8', at: 'left bottom'} }} 
        trigger="click"
        disabled={{ disabled }}
        ref="dropdown"
        container={{ container }}
    >
        <div class="k-wrapper" ev-click={{ self._focusInput }} tabindex="-1" ref="wrapper">
            <div class="k-prefix" v-if={{ blocks.prefix }}>
                <b:prefix />
            </div>
            <div class="k-main">
                <input type="hidden" value={{ value }} name={{ name }} />
                <Input v-if={{ !multiple && filterable }}
                    value={{ keywords == null ? labelObj.label : keywords }}
                    ev-input={{ self._onSearch }}
                    ev-blur={{ self._onBlur }}
                    ev-focus={{ self._selectInput }}
                    disabled={{ disabled }}
                    placeholder={{ _placeholder }}
                    ref="input"
                    size={{ size }}
                    fluid
                />
                <span class="k-placeholder c-ellipsis" v-else-if={{ !filterable && !hasValue }}>{{ _placeholder }}</span>
                <span class="k-value c-ellipsis" v-else-if={{ !multiple }}>{{ labelObj.label }}</span>
                <Animate a:tag="span" a:disabled class="k-values" v-else>
                    <Animate a:tag="span" class="k-select-tag" 
                        v-for={{ labelObj.labels }} 
                        v-for-value="item"
                        v-for-key="index"
                        key={{ value[index] }}
                        a:transition="c-fade"
                    >
                        <span class="k-text">{{ item }}</span>
                        <i class="k-icon ion-ios-close-empty"
                            ev-click={{ self._delete.bind(self, value[index]) }}
                        ></i>
                    </Animate>
                    <Input v-if={{ filterable }}
                        value={{ keywords }}
                        ev-input={{ self._onSearch }}
                        ev-blur={{ self._onBlur }}
                        ev-focus={{ self._onFocus }}
                        disabled={{ disabled }}
                        placeholder={{ !hasValue ? _placeholder : '' }}
                        ref="input"
                        autoWidth
                        size={{ size }}
                    />
                </Animate>
            </div>
            <span class="k-suffix" v-if={{ !hideIcon || clearable }}>
                <i v-if={{ clearable }}
                    class={{ {"k-clear ion-ios-close": true, "k-show": hasValue} }}
                    ev-click={{ self._onClear }}
                ></i>
                <i class="k-arrow ion-arrow-down-b" v-if={{ !hideIcon }}></i>
            </span>
        </div>{{ 
        Menu 
    }}</Dropdown>
</div>
