import {getRestProps, mapChildren} from '../utils';
import CarouselItem from './item';
import Button from '../button';
import Icon from '../icon';

const {
    className, children, arrow, effect,
    _translate, _stopTransition, clonedAmount
} = self.get();

const classNameObj = {
    'k-carousel': true,
    [className]: className,
    [`k-${arrow}`]: true,
    'k-stop': _stopTransition,
    [`k-${effect}`]: true,
};

self._values = [];
let index = 0;
const _children = [];
mapChildren(children, vNode => {
    if (vNode.tag === CarouselItem) {
        const props = vNode.props;
        const _props = {_parent: self};
        if (props.value == null) {
            _props.value = `$${index++}`;
        }
        vNode.props = {...props, ..._props};
        const value = vNode.props.value;
        if (props.key == null) {
            vNode.props.key = value;
        }

        self._values.push(value);
        vNode.$ = true;

        _children.push(vNode);
    }
});

const isSlide = self._isSlide();
const l = _children.length;
if (isSlide && l) {
    // clone first and last vNode for loop
    const clone = (vNode, props, index) => {
        return _Vdt.miss.clone(vNode, {
            _isCloned: true,
            key: `$cloned:${vNode.props.key}:${index}`,
            ...props,
        }, true);
    };
    const firstVNodes = [];
    const lastVNodes = [];
    for (let i = 0; i < clonedAmount; i++) {
        firstVNodes.push(clone(_children[i % l], {_isFirst: i === 0}, i));
        lastVNodes.unshift(clone(_children[((l - i - 1) % l + l) % l], {_isLast: i === 0}, i));
    }
    _children.push(...firstVNodes);
    _children.unshift(...lastVNodes);
}

<div class={{ classNameObj }} 
    {{ ...getRestProps(self) }}
>
    <div class="k-wrapper"
        style={{ {
            transform: isSlide ? `translate3d(${_translate}px, 0, 0)` : undefined,
        } }} 
    >
        {{ _children }}
    </div>
    <Button icon circle type="none" size="large" class="k-prev"
        ev-click={{ self._prev }}
    >
        <Icon class="ion-ios-arrow-left" />
    </Button>
    <Button icon circle type="none" size="large" class="k-next"
        ev-click={{ self._next }}
    >
        <Icon class="ion-ios-arrow-right" />
    </Button>
    <div class="k-indicator c-clearfix">
        <div v-for={{ self._values }}
            class={{ {'k-dot': true, 'k-active': self._isActive(value)} }}
            ev-click={{ self._setIndex.bind(self, key, false) }}
        ></div>
    </div>
</div>
