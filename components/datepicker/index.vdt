import Input from '../input';
import Tooltip from '../tooltip';
import {_$, isFunction, getRestProps} from '../utils';
import Calendar from './calendar';
import Button from '../button';
import Icon from '../icon';

const {
    value, clearable, className, style, _isShow,
    name, disabled, placeholder, size, transition,
    _value, range, type, ref, key, shortcuts, container,
    maxDate, minDate, ...rest
} = self.get();

// pass the rest props to Calendar, except events
const _rest = {};
const _events = {};
for (let key in rest) {
    if (key.substring(0, 3) !== 'ev-') {
        _rest[key] = rest[key];
    } else {
        _events[key] = rest[key];
    }
}

const classNameObj = {
    'k-datepicker': true,
    'k-disabled': disabled,
    'k-show': _isShow,
    [className]: className,
    'k-range': range,
    [scope.className]: scope.className,
};

const hasShortcuts = shortcuts && shortcuts.length;
let _placeholder = placeholder || scope.placeholder;
if (_placeholder == null) {
    if (type === 'datetime') {
        if (range) {
            _placeholder = _$('开始时间 ~ 结束时间');
        } else {
            _placeholder = _$('请选择日期和时间');
        }
    } else if (type === 'year') {
        _placeholder = _$('请选择年份');
    } else if (type === 'month') {
        _placeholder = _$('请选择月份');
    } else {
        if (range) {
            _placeholder = _$('开始日期 ~ 结束日期');
        } else {
            _placeholder = _$('请选择日期');
        }
    }
}

const Panel = scope.Panel || Calendar;
const _maxDate = maxDate && self._createDate(maxDate);
const _minDate = minDate && self._createDate(minDate);

let panelProps;
if (range) {
    panelProps = {
        value: _value,
        type,
        dayClassNames: self._checkDateInRange,
        onMouseEnterDay: self._highlightRangeDays,
        multiple: true,
        range: true,
        autoChangeToTimePicker: false,
        maxDate: _maxDate,
        minDate: _minDate,
        _parent: self,
        'ev-$change:value': self._onChangeValueForRange,
        'ev-hide': self._hide,
        'ev-$change:_showDate': self._onChangeShowDate,
        'ev-wheel': self._onWheel,
    }
}

const content = <b:content>
    <div class="k-shortcuts" v-if={{ hasShortcuts }}>
        <div v-for={{ shortcuts }} 
            class="k-item c-ellipsis"
            ev-click={{ self._setValue.bind(self, value.value()) }}
        >{{ isFunction(value.label) ? value.label() : value.label }}</div>
    </div>
    <template v-if={{ !range }}>
        <b:singe-panel>
            <Panel
                v-model="_value" 
                {{ ..._rest }} 
                ev-hide={{ self._hide }}
                type={{ type }}
                ref="begin"
                ev-enter:select={{ self._focus }}
                maxDate={{ _maxDate }}
                minDate={{ _minDate }}
                ev-wheel={{ self._onWheel }}
            />
        </b:singe-panel>
    </template>
    <div v-else class="k-range c-clearfix" ev-mouseleave={{ self._clearRangeEndDate }}>
        <Panel
            {{ ..._rest }}
            {{ ...panelProps }}
            ev-$inited={{ self._setBeginShowDate  }}
            ref="begin"
            _index={{ 0 }}
            _id="0"
        />
        <Panel
            {{ ..._rest }} 
            {{ ...panelProps }}
            ev-$inited={{ self._setEndShowDate }}
            ref="end"
            _index={{ 1 }}
            _id="1"
        />
    </div>
    <div v-if={{ type === 'datetime' || type === 'year' || type === 'month' || scope.showFooter }}
        class="k-footer"
    >
        <Button type="primary" size="small"
            disabled={{ !value }}
            ev-click={{ self._confirm }}
        >{{ _$('确定') }}</Button>
    </div>
</b:content>

const suffix = <b:suffix><Icon class="k-icon-calendar" /></b:suffix>

<div {{ ...getRestProps(self, _events) }} class={{ classNameObj }} style={{ style }}
    tabindex={{ disabled ? '-1' : '0' }}
    ev-keydown={{ self._onKeydown }}
>
    <Tooltip
        class={{ {
            "k-datepicker-content": true,
            'k-with-shortcuts': hasShortcuts,
            [scope.className]: scope.className,
        } }}
        position={{ {my: 'left top+8', at: 'left bottom', collision: 'flip'} }}
        trigger="click"
        showArrow={{ false }}
        transition={{ transition }}
        ref="calendar"
        disabled={{ disabled }}
        ev-show={{ self._onShow }}
        ev-hide={{ self._onHide }}
        ev-$changed:value={{ self._onChangeShow }}
        container={{ container }}
        theme="light"
    >
        <Input
            placeholder={{ _placeholder }}
            value={{ self._format() }}
            clearable={{ clearable }}
            ev-clear={{ self.onClear }}
            name={{ name }}
            disabled={{ disabled }}
            size={{ size }}
            ref="input"
            tabindex="-1"
            ev-blur={{ self.onInputFocusOut }}
            stackClearIcon
            ev-input={{ self._onInput }}
            ev-change={{ self._onChange }}
            ev-focus={{ self._onFocus }}
            frozenOnInput
            fluid
        >
            <b:suffix>{{ suffix }}</b:suffix>
        </Input>
        <b:content>{{ content }}</b:content>
    </Tooltip>
</div>
