import Select from '../select';
import Input from '../input';
import {ButtonGroup, Button} from '../button';
import {_$} from '../utils';

const {
    total, current, limit, limits, 
    className, showTotal, showGoto,
    counts, size, noBorder, ...rest
} = self.get();

if (!total) return <!-- pagination -->

const classNameObj = {
    'k-pagination': true,
    [className]: className,
    [`k-${size}`]: size !== 'default',
    ['k-no-border']: noBorder,
};

let type = 'default';
if (noBorder) {
    type = 'none';
}

const totalPages = (Math.ceil(total / limit)) || 0;

const paginationButton = function(page) {
    return (
        <Button type={{ type }} size={{ size }} icon value={{ page }}>{{ page }}</Button>
    );
};

const paginationDot = function(callback) {
    return <Button type={{ type }} size={{ size }} icon class="k-ellipsis" ev-click={{ callback }}>...</Button>
};

<div class={{ classNameObj }}>
    <ButtonGroup checkType="radio" v-model="current">
        <Button icon size={{ size }}
            disabled={{ current <= 1 }}
            ev-click={{ self.prev }}
            type={{ type }}
        ><i class="k-icon ion-ios-arrow-left"></i></Button>{{ 
            do {
                let items = [];
                let minCount = Math.ceil(counts / 2);
                let maxCount = totalPages - minCount;
                let prevPage = current - 1;
                let nextPage = current + 1;

                if (totalPages > counts) {
                    if (current <= minCount) {
                        const max = counts - 2;
                        for (let i = 1; i <= max; i++) {
                            items.push(paginationButton(i));
                        }
                        items.push(paginationDot(self.fastNext));
                        items.push(paginationButton(totalPages));
                    } else if (current > minCount && current <= maxCount) {
                        items.push(paginationButton(1));
                        items.push(paginationDot(self.fastPrev));

                        const midCount = counts - 4;
                        const mid = Math.floor(midCount / 2);
                        const min = current - mid;
                        const max = midCount % 2 === 1 ? current + mid : current + mid - 1;
                        for (let i = min; i <= max; i++) {
                            items.push(paginationButton(i));
                        }

                        items.push(paginationDot(self.fastNext));
                        items.push(paginationButton(totalPages));
                    } else {
                        items.push(paginationButton(1));
                        items.push(paginationDot(self.fastPrev));

                        const min = totalPages - counts + 3;
                        for (let i = min; i <= totalPages; i++) {
                            items.push(paginationButton(i));
                        }
                    }
                } else {
                    for (let i = 1; i <= totalPages; i++) {
                        items.push(paginationButton(i));
                    }
                }

                items;
            } 
        }}<Button icon size={{ size }}
            disabled={{ current >= totalPages }}
            ev-click={{ self.next }}
            type={{ type }}
        ><i class="k-icon ion-ios-arrow-right"></i></Button>
    </ButtonGroup>

    <div class="k-limits">
        <Select v-model="limit" allowUnmatch
            data={{ limits.map(item => {
                return {'value': item, 'label': _$('{n} 条 / 页', {n: item})};
            }) }}
            size={{ size }}
        />
    </div>

    <div class="k-goto" v-if={{ showGoto }}>
        {{ _$('跳至') }}<Input size={{ size }} value={{ current }}
            ev-change={{ self._goto }}
        />{{ _$('页') }}
    </div>

    <div v-if={{ showTotal }} class="k-total">{{ _$('共 {n} 条', {n: total}) }}</div>
</div>
