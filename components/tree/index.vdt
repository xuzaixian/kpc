import Checkbox from '../checkbox';
import {getRestProps} from '../utils';
import {BEFORE, AFTER, INNER} from './constants';

const {checkbox, load, className, draggable, _draggingNode, selectable} = self.get();
const {expandedKeys, selectedKeys, _node, _mode, expandAnimationCallbacks} = self;

const useMoveAnimation = !!_draggingNode;

const TreeNodes = ({data}) => {
    return __u.map(data, value => {
        if (!value.filter) return;

        const key = value.key;
        const expanded = expandedKeys.has(key);
        const selected = selectable && selectedKeys.has(key);
        const disabled = value.data.disabled;

        return <Animate
            a:move={{ false }}
            {{ ...expandAnimationCallbacks }}
            class={{ {
                "k-node": true,
                "k-expanded": expanded, 
                "k-disabled": disabled,
                "k-selected": selected,
                "k-dragging": _draggingNode && _draggingNode.key === key,
            } }}
            key={{ key }}
        >
            <div
                class={{ {
                    "k-label": true, 
                    "k-leaf": !value.children,
                    "k-insert-before": _node && _node.key === key && _mode === BEFORE,
                    "k-insert-after": _node && _node.key === key && _mode === AFTER,
                    "k-insert-inner": _node && _node.key === key && _mode === INNER,
                } }}
                ev-mousedown={{ self._onMouseDown.bind(self, value) }}
                ev-dragover={{ self._onDragOver.bind(self, value) }}
            >
                <i class="k-icon ion-android-arrow-dropdown"
                    ev-click={{ self._toggleExpand.bind(self, value, expanded) }}
                    v-if={{ value.children && value.loaded !== false }}
                ></i>
                <i class="k-icon ion-load-c icon-loading" v-if={{ value.loaded === false }}></i>
                <Checkbox v-if={{ checkbox }} 
                    disabled={{ value.data.disabled }}
                    ev-click={{ self._toggleCheck.bind(self, value) }}
                    value={{ value.checked }}
                    indeterminate={{ value.indeterminate }}
                />
                <b:label args={{ [value.data, value] }}>
                    <span class="k-text" 
                        ev-click={{ self._onClick.bind(self, value) }}
                        ev-contextmenu={{ self._onRightClick.bind(self, value) }}
                    >{{ value.data.label }}</span>
                </b:label>
            </div>
            <Animate 
                a:move={{ useMoveAnimation }}
                {{ ...expandAnimationCallbacks }}
                v-if={{ expanded }}
                class="k-tree"
                key="tree"
            > 
                <TreeNodes data={{ value.children }} />
            </Animate>
        </Animate>
    });
};

<Animate class={{ {"k-tree": true, [className]: className} }}
    {{ ...getRestProps(self) }}
    draggable={{ draggable ? "true" : undefined }}
    a:disabled={{ true }}
    ev-dragstart={{ draggable && self._onDragStart }}
    ev-dragend={{ draggable && self._onDragEnd }}
    a:move={{ useMoveAnimation }}
>
    <TreeNodes data={{ self.root.children }} />
</Animate>
